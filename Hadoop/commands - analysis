-- make hdfs folder
hadoop fs -mkdir /hive/

-- check contents of hdfs
hadoop fs -ls /
hadoop fs -ls /hive/

-- put file from local disk to hdfs
hadoop fs -put /home/cloudera/Desktop/ml-100k/u.user /hive/

-- create external table if doesn't exist
-- when external table is dropped, only the meta data is dropped, doesn't touch the actual data
hive>
CREATE EXTERNAL TABLE IF NOT EXISTS userinfo
(
userid int
,age int
,gender string
,occupation string
,zipcode string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;

-- load data into hive hdfs table - overwrite if already exists
hive>
LOAD DATA INPATH '/hive/u.user' OVERWRITE INTO TABLE userinfo;

-- query table
hive>
select count(*) from userinfo;
select occupation, count(*) from userinfo group by occupation;

-- drop table
hive>
drop table userinfo;

-- create internal table if doesn't exist
hive>
CREATE TABLE IF NOT EXISTS movies
(
MovieID int
,MovieTitle string
,ReleaseDate string
,VideoReleaseDate string
,IMDbURL string
,GenreUnknown string
,GenreAction string
,GenreAdventure string
,GenreAnimation string
,GenreChildrens string
,GenreComedy string
,GenreCrime string
,GenreDocumentary string
,GenreDrama string
,GenreFantasy string
,GenreFilmNoir string
,GenreHorror string
,GenreMusical string
,GenreMystery string
,GenreRomance string
,GenreSciFi string
,GenreThriller string
,GenreWar string
,GenreWestern string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY '|'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;

-- see details of the table
hive>
describe movies;

-- see further details of the table
hive>
describe formatted movies;

-- put file from local disk to hdfs
hadoop fs -put /home/cloudera/Desktop/ml-100k/u.item /hive/

-- load data into hive hdfs table - overwrite if already exists
hive>
LOAD DATA INPATH '/hive/u.item' OVERWRITE INTO TABLE movies;

-- check contents of hdfs
-- file should be gone after data has been loaded
hadoop fs -ls /hive/

-- query table
hive>
select * from item;
select movietitle, releasedate from item where genrechildrens = '1' order by releasedate desc limit 10;

-- create table with complex fields
hive>
CREATE TABLE customers
(
cust_id INT
,fname STRING
,lname STRING
,email STRING
,phone MAP <STRING, STRING>
,order_ids ARRAY <INT>
,order_value STRUCT <min:INT, max:INT, avg:INT, total:INT>
)
ROW FORMAT
DELIMITED FIELDS TERMINATED BY '|'
COLLECTION ITEMS TERMINATED BY ','
MAP KEYS TERMINATED BY ':';

-- create table with complex fields
hive>
CREATE TABLE Products
(
id INT
,ProductName STRING
,ProductColorOptions ARRAY<STRING>
);

-- insert data into table with complex fields
hive>
INSERT INTO TABLE Products
SELECT 1, 'Widgets', array('Red', 'Blue', 'Green')
UNION ALL
SELECT 2, 'Cogs', array('Blue', 'Green', 'Yellow');

-- query table with complex fields
hive>
SELECT id, productname, productcoloroptions FROM products;

-- impala web ui
http://quickstart.cloudera:8888/notebook/editor?type=impala

-- put movielens data into hdfs
hadoop fs -put /home/cloudera/Desktop/tags.csv /hive/
hadoop fs -put /home/cloudera/Desktop/movies.csv /hive/
hadoop fs -put /home/cloudera/Desktop/ratings.csv /hive/

-- create movielens tags table
hive>
CREATE TABLE IF NOT EXISTS tags
(
userid int
,movieid int
,tag string
,timestamp string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;

-- create movielens movies table
hive>
CREATE TABLE IF NOT EXISTS movies
(
movieid int
,title string
,genres array <string>
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
COLLECTION ITEMS TERMINATED BY '|'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;

-- create movielens ratings table
hive>
CREATE TABLE IF NOT EXISTS ratings
(
userid int
,movieid int
,rating decimal
,timestamp string
)
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ','
LINES TERMINATED BY '\n'
STORED AS TEXTFILE;

-- load movielens data into hive hdfs movielens tables
hive>
LOAD DATA INPATH '/hive/tags.csv' OVERWRITE INTO TABLE tags;
LOAD DATA INPATH '/hive/movies.csv' OVERWRITE INTO TABLE movies;
LOAD DATA INPATH '/hive/ratings.csv' OVERWRITE INTO TABLE ratings;

-- query movielens tables
hive>
select * from tags;
select * from movies;
select * from ratings;

-- make the tags data lower case (lower)
-- breakup the tags data (sentences)
-- n-gram the tags
hive>
SELECT EXPLODE(c(SENTENCES(LOWER(tag)),2,5)) AS ngrams FROM tags;
SELECT EXPLODE(NGRAMS(SENTENCES(LOWER(tag)),3,5)) AS ngrams FROM tags;

-- tags for highly rated films
hive>
SELECT EXPLODE(NGRAMS(SENTENCES(LOWER(tag)),3,5)) AS ngrams
FROM tags
JOIN ratings on ratings.movieid = tags.movieid
WHERE rating > 3;
